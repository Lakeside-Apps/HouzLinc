<Project Sdk="Uno.Sdk">
  <PropertyGroup>
    <TargetFrameworks>
      net9.0-android;
      net9.0-ios;
      net9.0-windows10.0.26100;
      net9.0-browserwasm;
      net9.0-desktop;
      net9.0
    </TargetFrameworks>

    <OutputType>Exe</OutputType>
    <UnoSingleProject>true</UnoSingleProject>
    
    <!-- ADD THESE MISSING PROPERTIES FOR MSIX PACKAGING -->
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>

    <!-- Display name -->
    <ApplicationTitle>HouzLinc</ApplicationTitle>
    <!-- App Identifier -->
    <ApplicationId>com.lakesideapps.houzlinc</ApplicationId>
    <!-- Versions -->
    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
    <ApplicationVersion>1</ApplicationVersion>
    <!--
      If you encounter this error message:

        error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
        Please update to a newer .NET SDK in order to reference this assembly.

      This means that the two packages below must be aligned with the "build" version number of
      the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
      must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
    -->
    <!-- <WindowsSdkPackageVersion>10.0.22621.28</WindowsSdkPackageVersion> -->

    <!--
      UnoFeatures let's you quickly add and manage implicit package references based on the features you want to use.
      https://aka.platform.uno/singleproject-features
    -->
    <UnoFeatures>
      Lottie;
      Hosting;
      Configuration;
      Material;
      Navigation;
      Toolkit;
    </UnoFeatures>
  </PropertyGroup>

  <PropertyGroup>
    <!-- The warning suppression indicated in article below does not appear to work
    https://platform.uno/docs/articles/uno-build-error-codes.html#unob0011-the-desktop-targetframework-must-be-placed-first-in-the-targetframeworks-property
    -->
    <UnoDisableVSWarnDesktopNotFirst>true</UnoDisableVSWarnDesktopNotFirst>
  </PropertyGroup>

<!-- 
 The following sections set packaging attributes based on how the build is run and
 what the expected output is. In particular this writes the Publisher attribute in the
 Package.appxmanifest file as follows:
  - For Visual Studio local installs (F5, Ctrl F5), OID should not be present in the
    publisher (Package.appxmanifest/Package/Identity/Provider) or Visual Studio
    will not be able to deploy the package.
  - To create an unsigned package, we use the magic OID specified below in the Publisher.
    This is a special value that indicates that the Publisher is in the unsigned namespace,
    see: https://github.com/MicrosoftDocs/msix-docs/issues/365.
  - To create a signed package, we need to specify a Publisher CN (Common name)
    that matches the certificate used to sign the package (not done yet!).
 -->
  
  <!-- Default properties for Visual Studio development (F5/Ctrl+F5) -->
  <PropertyGroup>
    <Publisher>CN=LakesideApps</Publisher>
    <Namespace>
      <Namespace Prefix="dn" Uri="http://schemas.microsoft.com/appx/manifest/foundation/windows10" />
    </Namespace>
    <GenerateAppInstallerFile>False</GenerateAppInstallerFile>
    <AppxPackageSigningEnabled>False</AppxPackageSigningEnabled>
    <AppxPackageSigningTimestampDigestAlgorithm>SHA256</AppxPackageSigningTimestampDigestAlgorithm>
    <AppxAutoIncrementPackageRevision>True</AppxAutoIncrementPackageRevision>
    <AppxSymbolPackageEnabled>False</AppxSymbolPackageEnabled>
    <GenerateTestArtifacts>True</GenerateTestArtifacts>
    <HoursBetweenUpdateChecks>0</HoursBetweenUpdateChecks>
    <GenerateTemporaryStoreCertificate>True</GenerateTemporaryStoreCertificate>
  </PropertyGroup>

  <!-- Configuration for unsigned package builds (for sideloading) -->
  <PropertyGroup Condition=" '$(PublishUnsignedPackage)' == 'true' ">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxBundle>Never</AppxBundle>
    <UapAppxPackageBuildMode>Sideloading</UapAppxPackageBuildMode>
    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
    <Publisher>CN=LakesideApps, OID.2.25.311729368913984317654407730594956997722=1</Publisher>
  </PropertyGroup>

  <!-- Configuration for Microsoft Store builds (uses Package.StoreAssociation.xml) -->
  <PropertyGroup Condition=" '$(BuildForStore)' == 'true' ">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxBundle>Always</AppxBundle>
    <UapAppxPackageBuildMode>StoreUpload</UapAppxPackageBuildMode>
  </PropertyGroup>

  <!-- Include the Store Association file when building for store -->
  <ItemGroup Condition=" '$(BuildForStore)' == 'true' ">
    <None Include="Package.StoreAssociation.xml" />
  </ItemGroup>

  <Target Name="UpdateAppxManifest" BeforeTargets="GenerateManifests" Outputs=".\Package.appmanifest">
    <XmlPoke XmlInputPath=".\Package.appxmanifest" Query="/dn:Package/dn:Identity/@Publisher" Namespaces="$(Namespace)" Value="$(Publisher)" />
    <Message Importance="High" Text="Setting Package.appxmanifest/Package/Identity/Publisher to: $(Publisher)" />
  </Target>

  <!--
  Platform specific properties and dependencies
  -->
  <Choose>
    <When Condition="'$(TargetFramework)'=='net9.0-ios'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-android'">
      <PropertyGroup>
        <SupportedOSPlatformVersion>33.0</SupportedOSPlatformVersion>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-maccatalyst'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-windows10.0.19041'">
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Logging.Debug" />
      </ItemGroup>
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-desktop'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-browserwasm'">
    </When>
  </Choose>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.WinUI.Controls.SettingsControls" />
    <!-- Add more community toolkit references here -->
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\ViewModel\ViewModel.csproj" />
  </ItemGroup>

  <!-- ADD THESE MISSING SECTIONS FOR MSIX SUPPORT -->
  <!-- 
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>

  <!-- 
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution 
    Explorer "Package and Publish" context menu entry to be enabled for this project even if 
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

  <ItemGroup>
    <!-- https://platform.uno/docs/articles/external/uno.resizetizer/doc/using-uno-resizetizer.html?tabs=singleproject%2CAndroid -->
    <UnoImage Include="Assets\Images\*" />
    <UnoIcon Include="Assets\Icons\appicon.svg" ForegroundFile="Assets\Icons\appicon_foreground.svg" ForegroundScale="0.65" />
    <UnoSplashScreen Include="Assets\SplashScreen\splash_screen.svg" />
  </ItemGroup>

</Project>
