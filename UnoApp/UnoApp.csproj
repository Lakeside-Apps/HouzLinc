<Project Sdk="Uno.Sdk">
  <PropertyGroup>
    <TargetFrameworks>
      net9.0-android;
      net9.0-ios;
      net9.0-windows10.0.26100;
      net9.0-browserwasm;
      net9.0-desktop;
      net9.0
    </TargetFrameworks>

    <OutputType>Exe</OutputType>
    <UnoSingleProject>true</UnoSingleProject>

    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>

    <!-- Display name -->
    <ApplicationTitle>HouzLinc</ApplicationTitle>
    <!-- App Identifier -->
    <ApplicationId>com.lakesideapps.houzlinc</ApplicationId>

    <!-- Publisher -->
    <ApplicationPublisher>CN=LakesideApps</ApplicationPublisher>

    <!--
      If you encounter this error message:

        error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
        Please update to a newer .NET SDK in order to reference this assembly.

      This means that the two packages below must be aligned with the "build" version number of
      the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
      must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
    -->
    <!-- <WindowsSdkPackageVersion>10.0.22621.28</WindowsSdkPackageVersion> -->

    <!--
      UnoFeatures let you quickly add and manage implicit package references based on the features you want to use.
      https://aka.platform.uno/singleproject-features
    -->
    <UnoFeatures>
      Lottie;
      Hosting;
      Configuration;
      Material;
      Navigation;
      Toolkit
    </UnoFeatures>
  </PropertyGroup>

  <PropertyGroup>
    <!-- The warning suppression indicated in article below does not appear to work
    https://platform.uno/docs/articles/uno-build-error-codes.html#unob0011-the-desktop-targetframework-must-be-placed-first-in-the-targetframeworks-property
    -->
    <UnoDisableVSWarnDesktopNotFirst>true</UnoDisableVSWarnDesktopNotFirst>
  </PropertyGroup>

  <!-- Define msbuild parameters controlling the configuration so was to avoid editor warning -->
  <PropertyGroup>
    <BuildForStore Condition="'$(BuildForStore)'==''">false</BuildForStore>
    <PublishUnsignedPackage Condition="'$(PublishUnsignedPackage)'==''">false</PublishUnsignedPackage>
  </PropertyGroup>

  <Target Name="EchoPackagingFlags" BeforeTargets="GenerateAppxManifest">
    <Message Importance="High" Text="BuildForStore=$(BuildForStore), PublishUnsignedPackage=$(PublishUnsignedPackage)" />
  </Target>

  <!-- 
    The following sets the properties for building and packaging for Windows based on the desired configuration.
    Some of these properties, e.g., Publisher, Identity and Version are propagaed to the Package.appxmanifest.
  -->

  <!--
    Publisher is determined as follow:
    - For Visual Studio local installs (F5, Ctrl F5), OID should not be present in the
      publisher (Package.appxmanifest/Package/Identity/Provider) or Visual Studio
      will not be able to deploy the package.
    - To create an unsigned package, we use the magic OID specified below in the Publisher.
      This is a special value that indicates that the Publisher is in the unsigned namespace,
      see: https://github.com/MicrosoftDocs/msix-docs/issues/365.
    - To create a signed package, we need to specify a Publisher CN (Common name)
      that matches the certificate used to sign the package (not done yet!).
   -->

  <!-- Visual Studio development (F5/Ctrl+F5) / Unpackaged builds / Desktop builds -->
  <PropertyGroup>
    <Publisher>CN=LakesideApps</Publisher>
    <GenerateAppInstallerFile>False</GenerateAppInstallerFile>
    <AppxPackageSigningEnabled>False</AppxPackageSigningEnabled>
    <AppxPackageSigningTimestampDigestAlgorithm>SHA256</AppxPackageSigningTimestampDigestAlgorithm>
    <AppxAutoIncrementPackageRevision>True</AppxAutoIncrementPackageRevision>
    <AppxSymbolPackageEnabled>False</AppxSymbolPackageEnabled>
    <GenerateTestArtifacts>True</GenerateTestArtifacts>
    <HoursBetweenUpdateChecks>0</HoursBetweenUpdateChecks>
    <GenerateTemporaryStoreCertificate>True</GenerateTemporaryStoreCertificate>
  </PropertyGroup>

  <!-- Unsigned packaged builds (for sideloading) -->
  <PropertyGroup Condition="'$(PublishUnsignedPackage)'=='true'">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxBundle>Never</AppxBundle>
    <UapAppxPackageBuildMode>Sideloading</UapAppxPackageBuildMode>
    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
    <Publisher>CN=LakesideApps, OID.2.25.311729368913984317654407730594956997722=1</Publisher>
  </PropertyGroup>

  <!-- Microsoft Store builds (uses Package.StoreAssociation.xml) -->
  <PropertyGroup Condition=" '$(BuildForStore)' == 'true' ">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxBundle>Never</AppxBundle> <!-- Uno recommendation -->
    <UapAppxPackageBuildMode>StoreUpload</UapAppxPackageBuildMode>
    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
    <!-- Set the Store publisher and identity name expected by Partner Center -->
    <Publisher>CN=79C1AE62-9FA2-42F6-912A-9CBC6F4260D8</Publisher>
    <StorePackageIdentityName>LakesideApps.HouzLinc</StorePackageIdentityName>
    <!-- Optional but recommended to produce .appxupload -->
    <GenerateAppxUploadOnBuild>true</GenerateAppxUploadOnBuild>
    <AppxUploadSkipPdbFiles>true</AppxUploadSkipPdbFiles>
  </PropertyGroup>

  <!-- ApplicationDisplayVersion and ApplicationVersion:
    MSIX/app install version used by Windows packaging (and Uno).
    Identity.Version = Major.Minor.Build.Revision is composed of:
    - ApplicationDisplayVersion = Major.Minor.Build (3-part)
    - ApplicationVersion = Revision (4th part; must be 0 for Store)
    This is what users see and what Partner Center validates. 
    Derive from central ProductVersion set in Directory.Build.props 
  -->
  <Target Name="SetApplicationDisplayVersion"
          DependsOnTargets="SetVersionProperties"
          BeforeTargets="ValidateStoreVersion;GenerateAppxManifest">
    <PropertyGroup>
      <ApplicationDisplayVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</ApplicationDisplayVersion>
      <ApplicationVersion>0</ApplicationVersion>
    </PropertyGroup>
    <Message Importance="High" Text="ApplicationDisplayVersion set to: $(ApplicationDisplayVersion).$(ApplicationVersion)" />
  </Target>

  <!-- Validate Store build properties -->
  <Target Name="ValidateStoreVersion"
          DependsOnTargets="SetApplicationDisplayVersion"
          BeforeTargets="GenerateAppxManifest"
          Condition="'$(BuildForStore)'=='true' and '$(TargetFramework)'=='net9.0-windows10.0.26100'">
    <Error Condition="'$(ApplicationVersion)' != '0'"
           Text="For Store uploads, ApplicationVersion (revision) must be 0. Current: $(ApplicationVersion)"/>
    <Error Condition="'$(StorePackageIdentityName)' == ''"
           Text="For Store uploads, StorePackageIdentityName must be set."/>
    <Error Condition="'$(Publisher)' == ''"
           Text="For store uploads, Publisher must be set."/>
  </Target>

  <!-- Dynamically propagate publisher, identity name and version to Package.appxmanifest -->
  <Target Name="GenerateAppxManifest"
          DependsOnTargets="ValidateStoreVersion"
          BeforeTargets="GenerateAppxPackageFile;GeneratePackageAppxManifest;GenerateManifests"
          Condition="'$(TargetFramework)'=='net9.0-windows10.0.26100'">

    <!-- Copy source manifest template to generated manifest -->
    <Copy SourceFiles="Package.template.appxmanifest" 
          DestinationFiles="Package.appxmanifest" 
          SkipUnchangedFiles="false" />

    <!-- Update the generated manifest -->
    <!-- Publisher -->
    <XmlPoke XmlInputPath=".\Package.appxmanifest"
             Query="/dn:Package/dn:Identity/@Publisher"
             Namespaces="&lt;Namespace Prefix='dn' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;"
             Value="$(Publisher)" />
    <Message Importance="High"
             Text="Setting Identity Publisher: $(Publisher)" />

    <!-- Identity Name (Store builds) -->
    <XmlPoke Condition=" '$(BuildForStore)' == 'true' "
             XmlInputPath=".\Package.appxmanifest"
             Query="/dn:Package/dn:Identity/@Name"
             Namespaces="&lt;Namespace Prefix='dn' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;"
             Value="$(StorePackageIdentityName)" />
    <Message Condition=" '$(BuildForStore)' == 'true' " Importance="High"
             Text="Setting Identity Name: $(StorePackageIdentityName)" />

    <!-- Version -->
    <XmlPoke XmlInputPath=".\Package.appxmanifest"
             Query="/dn:Package/dn:Identity/@Version"
             Namespaces="&lt;Namespace Prefix='dn' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;"
             Value="$(ApplicationDisplayVersion).$(ApplicationVersion)" />
    <Message Importance="High"
             Text="Setting Identity Version: $(ApplicationDisplayVersion).$(ApplicationVersion)" />
  </Target>

  <!--
    Platform specific properties and dependencies
    Consider putting the net9.0-windows10.0.26100 specific stuff above in the corresponding When block below
  -->
  <Choose>
    <When Condition="'$(TargetFramework)'=='net9.0-ios'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-android'">
      <PropertyGroup>
        <SupportedOSPlatformVersion>35.0</SupportedOSPlatformVersion>
  </PropertyGroup>
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-maccatalyst'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-windows10.0.19041'">
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Logging.Debug" />
      </ItemGroup>
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-desktop'">
    </When>
    <When Condition="'$(TargetFramework)'=='net9.0-browserwasm'">
    </When>
  </Choose>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.WinUI.Controls.SettingsControls" />
    <!-- Add more community toolkit references here -->
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\ViewModel\ViewModel.csproj" />
  </ItemGroup>

  <!-- 
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>

  <!-- 
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution 
    Explorer "Package and Publish" context menu entry to be enabled for this project even if 
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

  <!-- Works around the editor insisting on an int in ForegroundScale value -->
  <PropertyGroup>
    <IconForegroundScale>0.65</IconForegroundScale>
  </PropertyGroup>

  <ItemGroup>
    <!-- https://platform.uno/docs/articles/external/uno.resizetizer/doc/using-uno-resizetizer.html?tabs=singleproject%2CAndroid -->
    <UnoImage Include="Assets\Images\*" />
    <UnoIcon Include="Assets\Icons\appicon.svg" ForegroundFile="Assets\Icons\appicon_foreground.svg" ForegroundScale="$(IconForegroundScale)"/>
    <UnoSplashScreen Include="Assets\SplashScreen\splash_screen.svg" />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'net9.0-desktop' OR '$(TargetFramework)' == 'net9.0'">
    <DefineConstants>$(DefineConstants);DESKTOP</DefineConstants>
  </PropertyGroup>

</Project>
